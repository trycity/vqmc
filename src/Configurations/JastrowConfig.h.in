/**
 *@file JastrowConfig.h
 *
 *@author ikhan
 */

#ifndef _JASTROWCONFIG_H
#define _JASTROWCONFIG_H

#include <valarray>

#include "VQMCconfig.h"
#include "@BUILD_DIR@/src/Utilities/rand.h"
#include "@BUILD_DIR@/src/Utilities/VMCPoint.h"

#include "@BUILD_DIR@/src/Wavefunctions/Phi.h"
#include "@BUILD_DIR@/src/Wavefunctions/InteractionF.h"
#include "@BUILD_DIR@/src/Energy_Terms/localE.h"
#include "@BUILD_DIR@/src/Energy_Terms/localESqd.h"

namespace VQMC
{
   /**
   *@brief Class used to create a jastrow configuration,
   * requires 1-body wavefunction due to external potential (Phi)
   * and 2-body interaction term(InteractionF).
   * localE, localEsqd are the local energy terms derived from the wavefunctions
   */

   class JastrowConfig : public VQMCconfig
   {
   public:

      /**
       * Creates a JastrowConfig object
       *
       *@param The number of particles
       *@param The number of dimensions
       *@param The particle radius
       *@param The box size of the phase space
       *@param The single particle wavefunction
       *@param The interaction term of the wavefunction
       *@param The local Energy
       *@param The local Energy squared
       */
      JastrowConfig(unsigned NParticles, 
                    unsigned ndim, 
                    double ParticleRadius, 
                    const std::valarray<double>& BoxSize, 
                    const Phi& wfnPhi, 
                    const InteractionF& wfnF, 
                    const localE& LE, 
                    const localESqd& LESqd);
                   			
      /**
       * Destroys a JastrowConfig object
       */    
      ~JastrowConfig();
      
      /**
       *Performs a trial move of a node from some initial point to an endPoint
       *
       *@param A pointer to the chosen node
       *@param The endpoint as defined by a VMCPoint
       *@param A pointer to the probability value
       */					
      void TrialMove(unsigned* pnWalked, VMCPoint& endPoint, double* pdq);

      /**
       *Performs a move of a node from some initial point to a newPoint
       *
       *@param The node number
       *@param The new position for the chosen node k
       *@param if Energy should be computed or not
       */		
      void Move(unsigned k, const VMCPoint& newPoint, bool bComputeE);
	
   protected:

      /**
       *Computes the energy of the system
       *
       *@return The energy of the system
       */
      double ComputeEnergy();	

      /**
       *Computes the square of the energy of the system
       *
       *@return The energy squared of the system
       */	
      double ComputeEnergySqd();

      /// This data member represents the 1-body wavefunction				
      const Phi& m_wfnPhi;

      /// This data member represents the 2-body wavefunction
      const InteractionF& m_wfnF;

      /// This data member represents the local energy
      const localE& m_localEn;

      /// This data member represents the square of the local energy
      const localESqd& m_localEnSqd;

      /**
       * The maximum number of correlations determines if the energy of the system should be recomputed.  
       * If any of the first three particles alter their position then the energy is computed otherwise a previous value of energy is used.
       * This is a property of many body bose-systems
       */
      static const unsigned m_MaxCorrelation = 3;		
   };
}; // end of namespace

#endif
