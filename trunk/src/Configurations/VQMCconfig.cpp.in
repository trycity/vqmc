/**
 *@file VMCconfig.cpp
 *
 *@author ikhan
 */

#include "VQMCconfig.h"

using namespace VQMC;

VQMCconfig::VQMCconfig(unsigned NParticles, unsigned ndim, double ParticleRadius, const std::valarray<double>& BoxSize): 
   m_NParticles(NParticles), m_NDim(ndim), m_radius0(ParticleRadius), m_BoxSize(BoxSize)
{
   m_Energy = 0.0;
   m_EnergySqd = 0.0;
   m_EnergyComputed = false;
   m_Seed = -123456789;

   Initialize();
}

VQMCconfig::~VQMCconfig()
{
}

double VQMCconfig::getEnergy()
{
   if(!m_EnergyComputed) 
   {
      ComputeEnergy();
   }

   return m_Energy;
}

double VQMCconfig::getEnergySqd()
{
   if(!m_EnergyComputed) 
   {
      ComputeEnergySqd();
   }

   return m_EnergySqd;
}

unsigned VQMCconfig::getDimension() const
{
   return m_NDim;
}

unsigned VQMCconfig::getNParticles() const
{
   return m_NParticles;
}

void VQMCconfig::Initialize()
{
   m_vPoints.clear();
   VMCPoint point(m_NDim);
    
   /// set coordinates for first particle
   for(unsigned n=0; n<m_NDim; n++)
   {
      point[n] = (ran2(m_Seed)-0.5)*m_BoxSize[n];
   }

   m_vPoints.push_back(point);
	
   ///set coordinates for the remaining particles
   do
   {
      for(unsigned n=0; n<m_NDim; n++)
      {
         point[n] = (ran2(m_Seed)-0.5)*m_BoxSize[n];
      }
      bool Accept = true;
		
      for(unsigned j=0; j<m_vPoints.size(); j++)
      {
         double r = VmcDistance(point, m_vPoints[j]);
			
         if(r < m_radius0)
         {
            Accept = false;
            break;
         }
      }
		
      if(Accept)
      {
         m_vPoints.push_back(point);
      }
   }while(m_vPoints.size()<m_NParticles);
}
